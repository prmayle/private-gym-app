-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.attendance_summary (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  member_id uuid NOT NULL,
  month integer NOT NULL,
  year integer NOT NULL,
  total_booked integer DEFAULT 0,
  total_attended integer DEFAULT 0,
  total_no_shows integer DEFAULT 0,
  total_late_arrivals integer DEFAULT 0,
  attendance_rate numeric DEFAULT 
CASE
    WHEN (total_booked > 0) THEN (((total_attended)::numeric / (total_booked)::numeric) * (100)::numeric)
    ELSE (0)::numeric
END,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT attendance_summary_pkey PRIMARY KEY (id),
  CONSTRAINT attendance_summary_member_id_fkey FOREIGN KEY (member_id) REFERENCES public.members(id)
);
CREATE TABLE public.bookings (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  member_id uuid NOT NULL,
  session_id uuid NOT NULL,
  member_package_id uuid,
  booking_time timestamp with time zone DEFAULT now(),
  status USER-DEFINED DEFAULT 'confirmed'::booking_status,
  notes text,
  attended boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  attendance_time timestamp with time zone,
  cancelled_at timestamp with time zone,
  rating integer CHECK (rating >= 1 AND rating <= 5),
  feedback text,
  check_in_time timestamp with time zone,
  check_out_time timestamp with time zone,
  late_arrival boolean DEFAULT false,
  early_departure boolean DEFAULT false,
  CONSTRAINT bookings_pkey PRIMARY KEY (id),
  CONSTRAINT bookings_member_id_fkey FOREIGN KEY (member_id) REFERENCES public.members(id),
  CONSTRAINT bookings_member_package_id_fkey FOREIGN KEY (member_package_id) REFERENCES public.member_packages(id),
  CONSTRAINT bookings_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.sessions(id)
);
CREATE TABLE public.exercises (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  category text,
  muscle_groups ARRAY DEFAULT '{}'::text[],
  equipment_required ARRAY DEFAULT '{}'::text[],
  instructions text,
  difficulty_level integer CHECK (difficulty_level >= 1 AND difficulty_level <= 5),
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT exercises_pkey PRIMARY KEY (id)
);
CREATE TABLE public.features (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  description text NOT NULL,
  icon text NOT NULL,
  sort_order integer DEFAULT 0,
  is_active boolean DEFAULT true,
  created_by uuid,
  updated_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT features_pkey PRIMARY KEY (id),
  CONSTRAINT features_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id),
  CONSTRAINT features_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.member_checkins (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  member_id uuid NOT NULL,
  check_in_time timestamp with time zone DEFAULT now(),
  check_out_time timestamp with time zone,
  booking_id uuid,
  check_in_method text DEFAULT 'manual'::text,
  location text,
  checked_in_by uuid,
  notes text,
  CONSTRAINT member_checkins_pkey PRIMARY KEY (id),
  CONSTRAINT member_checkins_checked_in_by_fkey FOREIGN KEY (checked_in_by) REFERENCES auth.users(id),
  CONSTRAINT member_checkins_booking_id_fkey FOREIGN KEY (booking_id) REFERENCES public.bookings(id),
  CONSTRAINT member_checkins_member_id_fkey FOREIGN KEY (member_id) REFERENCES public.members(id)
);
CREATE TABLE public.member_goals (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  member_id uuid NOT NULL,
  goal_type text NOT NULL,
  target_value numeric,
  target_unit text,
  current_value numeric,
  target_date date,
  status text DEFAULT 'active'::text,
  notes text,
  created_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT member_goals_pkey PRIMARY KEY (id),
  CONSTRAINT member_goals_member_id_fkey FOREIGN KEY (member_id) REFERENCES public.members(id),
  CONSTRAINT member_goals_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.member_packages (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  member_id uuid NOT NULL,
  package_id uuid NOT NULL,
  start_date date NOT NULL,
  end_date date,
  sessions_remaining integer,
  status USER-DEFINED DEFAULT 'active'::membership_status,
  purchased_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  sessions_total integer DEFAULT 0,
  activated_at timestamp with time zone,
  auto_renew boolean DEFAULT false,
  CONSTRAINT member_packages_pkey PRIMARY KEY (id),
  CONSTRAINT member_packages_package_id_fkey FOREIGN KEY (package_id) REFERENCES public.packages(id),
  CONSTRAINT member_packages_member_id_fkey FOREIGN KEY (member_id) REFERENCES public.members(id)
);
CREATE TABLE public.members (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  emergency_contact text,
  medical_conditions text,
  date_of_birth date,
  gender text,
  address text,
  height numeric,
  weight numeric,
  profile_photo_url text,
  joined_at timestamp with time zone DEFAULT now(),
  membership_status USER-DEFINED DEFAULT 'active'::membership_status,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  member_number text UNIQUE,
  fitness_goals text,
  waiver_signed boolean DEFAULT false,
  waiver_signed_date timestamp with time zone,
  CONSTRAINT members_pkey PRIMARY KEY (id),
  CONSTRAINT members_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.notifications (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  title text NOT NULL,
  message text NOT NULL,
  type USER-DEFINED NOT NULL,
  is_read boolean DEFAULT false,
  metadata jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT notifications_pkey PRIMARY KEY (id),
  CONSTRAINT notifications_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.package_restrictions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  package_id uuid NOT NULL,
  restriction_type text NOT NULL,
  restriction_value text NOT NULL,
  is_allowed boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT package_restrictions_pkey PRIMARY KEY (id),
  CONSTRAINT package_restrictions_package_id_fkey FOREIGN KEY (package_id) REFERENCES public.packages(id)
);
CREATE TABLE public.packages (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name text NOT NULL,
  description text,
  price numeric NOT NULL,
  duration_days integer,
  session_count integer,
  package_type USER-DEFINED NOT NULL,
  features jsonb,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT packages_pkey PRIMARY KEY (id)
);
CREATE TABLE public.page_sections (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  page_id uuid NOT NULL,
  section_id uuid NOT NULL,
  sort_order integer NOT NULL,
  is_enabled boolean DEFAULT true,
  content_data jsonb NOT NULL DEFAULT '{}'::jsonb,
  created_by uuid,
  updated_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT page_sections_pkey PRIMARY KEY (id),
  CONSTRAINT page_sections_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id),
  CONSTRAINT page_sections_page_id_fkey FOREIGN KEY (page_id) REFERENCES public.pages(id),
  CONSTRAINT page_sections_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT page_sections_section_id_fkey FOREIGN KEY (section_id) REFERENCES public.sections(id)
);
CREATE TABLE public.pages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  slug text NOT NULL UNIQUE,
  title text NOT NULL,
  description text,
  meta_title text,
  meta_description text,
  is_published boolean DEFAULT true,
  created_by uuid,
  updated_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT pages_pkey PRIMARY KEY (id),
  CONSTRAINT pages_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT pages_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id)
);
CREATE TABLE public.payments (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  member_id uuid NOT NULL,
  package_id uuid,
  session_id uuid,
  amount numeric NOT NULL,
  payment_method text,
  transaction_id text,
  payment_date timestamp with time zone DEFAULT now(),
  status USER-DEFINED DEFAULT 'pending'::payment_status,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  currency text DEFAULT 'USD'::text,
  invoice_number text,
  due_date date,
  processed_by uuid,
  CONSTRAINT payments_pkey PRIMARY KEY (id),
  CONSTRAINT payments_package_id_fkey FOREIGN KEY (package_id) REFERENCES public.packages(id),
  CONSTRAINT payments_member_id_fkey FOREIGN KEY (member_id) REFERENCES public.members(id),
  CONSTRAINT payments_processed_by_fkey FOREIGN KEY (processed_by) REFERENCES auth.users(id),
  CONSTRAINT payments_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.sessions(id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  email text NOT NULL UNIQUE,
  full_name text,
  phone text,
  role USER-DEFINED DEFAULT 'member'::user_role,
  avatar_url text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  is_active boolean DEFAULT true,
  last_login_at timestamp with time zone,
  timezone text DEFAULT 'UTC'::text,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.progress_tracking (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  member_id uuid NOT NULL,
  measurement_date date NOT NULL,
  weight numeric,
  body_fat_percentage numeric,
  muscle_mass numeric,
  photos_urls ARRAY,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  bmi numeric,
  chest numeric,
  waist numeric,
  hips numeric,
  arms numeric,
  thighs numeric,
  recorded_by uuid,
  CONSTRAINT progress_tracking_pkey PRIMARY KEY (id),
  CONSTRAINT progress_tracking_member_id_fkey FOREIGN KEY (member_id) REFERENCES public.members(id),
  CONSTRAINT progress_tracking_recorded_by_fkey FOREIGN KEY (recorded_by) REFERENCES auth.users(id)
);
CREATE TABLE public.sections (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL UNIQUE,
  display_name text NOT NULL,
  description text,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT sections_pkey PRIMARY KEY (id)
);
CREATE TABLE public.session_templates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  description text,
  session_type text NOT NULL,
  duration_minutes integer NOT NULL DEFAULT 60,
  max_capacity integer DEFAULT 1 CHECK (max_capacity > 0),
  price numeric CHECK (price >= 0::numeric),
  equipment_needed ARRAY DEFAULT '{}'::text[],
  instructions text,
  is_active boolean DEFAULT true,
  created_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT session_templates_pkey PRIMARY KEY (id),
  CONSTRAINT session_templates_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.sessions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  title text NOT NULL,
  description text,
  trainer_id uuid,
  max_capacity integer DEFAULT 1,
  start_time timestamp with time zone NOT NULL,
  end_time timestamp with time zone NOT NULL,
  session_type text NOT NULL,
  status USER-DEFINED DEFAULT 'scheduled'::session_status,
  price numeric,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  current_bookings integer DEFAULT 0,
  location text,
  equipment_needed ARRAY,
  is_recurring boolean DEFAULT false,
  recurrence_rule text,
  recurrence_end_date date,
  original_session_id uuid,
  template_id uuid,
  CONSTRAINT sessions_pkey PRIMARY KEY (id),
  CONSTRAINT sessions_trainer_id_fkey FOREIGN KEY (trainer_id) REFERENCES public.trainers(id),
  CONSTRAINT sessions_original_session_id_fkey FOREIGN KEY (original_session_id) REFERENCES public.sessions(id),
  CONSTRAINT sessions_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.session_templates(id)
);
CREATE TABLE public.testimonials (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  role text NOT NULL,
  content text NOT NULL,
  image_url text,
  sort_order integer DEFAULT 0,
  is_active boolean DEFAULT true,
  created_by uuid,
  updated_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT testimonials_pkey PRIMARY KEY (id),
  CONSTRAINT testimonials_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT testimonials_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id)
);
CREATE TABLE public.trainer_availability (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  trainer_id uuid NOT NULL,
  day_of_week integer NOT NULL CHECK (day_of_week >= 0 AND day_of_week <= 6),
  start_time time without time zone NOT NULL,
  end_time time without time zone NOT NULL,
  is_available boolean DEFAULT true,
  effective_from date DEFAULT CURRENT_DATE,
  effective_until date,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT trainer_availability_pkey PRIMARY KEY (id),
  CONSTRAINT trainer_availability_trainer_id_fkey FOREIGN KEY (trainer_id) REFERENCES public.trainers(id)
);
CREATE TABLE public.trainer_unavailability (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  trainer_id uuid NOT NULL,
  start_datetime timestamp with time zone NOT NULL,
  end_datetime timestamp with time zone NOT NULL,
  reason text,
  type text DEFAULT 'time_off'::text,
  approved_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT trainer_unavailability_pkey PRIMARY KEY (id),
  CONSTRAINT trainer_unavailability_approved_by_fkey FOREIGN KEY (approved_by) REFERENCES auth.users(id),
  CONSTRAINT trainer_unavailability_trainer_id_fkey FOREIGN KEY (trainer_id) REFERENCES public.trainers(id)
);
CREATE TABLE public.trainers (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  specializations ARRAY,
  certifications ARRAY,
  bio text,
  hourly_rate numeric,
  profile_photo_url text,
  is_available boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  experience_years integer DEFAULT 0,
  hire_date date DEFAULT CURRENT_DATE,
  max_sessions_per_day integer DEFAULT 8,
  CONSTRAINT trainers_pkey PRIMARY KEY (id),
  CONSTRAINT trainers_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.waitlist (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  member_id uuid NOT NULL,
  session_id uuid NOT NULL,
  position integer NOT NULL,
  joined_at timestamp with time zone DEFAULT now(),
  notified_at timestamp with time zone,
  expires_at timestamp with time zone,
  status text DEFAULT 'waiting'::text CHECK (status = ANY (ARRAY['waiting'::text, 'notified'::text, 'expired'::text, 'booked'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT waitlist_pkey PRIMARY KEY (id),
  CONSTRAINT waitlist_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.sessions(id),
  CONSTRAINT waitlist_member_id_fkey FOREIGN KEY (member_id) REFERENCES public.members(id)
);
CREATE TABLE public.workout_exercises (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  workout_log_id uuid NOT NULL,
  exercise_id uuid NOT NULL,
  sets integer,
  reps integer,
  weight_kg numeric,
  duration_seconds integer,
  distance_meters numeric,
  rest_seconds integer,
  notes text,
  order_in_workout integer,
  CONSTRAINT workout_exercises_pkey PRIMARY KEY (id),
  CONSTRAINT workout_exercises_workout_log_id_fkey FOREIGN KEY (workout_log_id) REFERENCES public.workout_logs(id),
  CONSTRAINT workout_exercises_exercise_id_fkey FOREIGN KEY (exercise_id) REFERENCES public.exercises(id)
);
CREATE TABLE public.workout_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  member_id uuid NOT NULL,
  session_id uuid,
  workout_date date NOT NULL DEFAULT CURRENT_DATE,
  workout_type text,
  duration_minutes integer CHECK (duration_minutes > 0),
  calories_burned integer CHECK (calories_burned >= 0),
  exercises jsonb DEFAULT '[]'::jsonb,
  notes text,
  trainer_notes text,
  intensity_level integer CHECK (intensity_level >= 1 AND intensity_level <= 10),
  mood_before integer CHECK (mood_before >= 1 AND mood_before <= 5),
  mood_after integer CHECK (mood_after >= 1 AND mood_after <= 5),
  created_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT workout_logs_pkey PRIMARY KEY (id),
  CONSTRAINT workout_logs_member_id_fkey FOREIGN KEY (member_id) REFERENCES public.members(id),
  CONSTRAINT workout_logs_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT workout_logs_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.sessions(id)
);